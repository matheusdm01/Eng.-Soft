O projeto da Agenda Virtual segue diversos princípios fundamentais de design de software, com o objetivo de tornar o sistema mais modular, compreensível e fácil de manter. Esses princípios foram aplicados tanto na estrutura das classes quanto no comportamento do sistema descrito nos diagramas.

Um dos principais conceitos utilizados é o princípio da responsabilidade única (SRP). No modelo estrutural, observa-se que a classe Usuario é responsável apenas por armazenar e gerenciar informações do usuário, como nome, e-mail e senha, enquanto a classe Card_tarefa se encarrega exclusivamente das operações relacionadas às tarefas — criação, edição, exclusão e controle de prazos. Essa separação clara de funções evita sobrecarga de responsabilidades em uma mesma classe e facilita futuras modificações sem comprometer outras partes do código.

Outro princípio fortemente presente é o ocultamento de informação, também conhecido como encapsulamento. Os atributos das classes são privados e acessados apenas por métodos públicos (get e set), garantindo que detalhes internos da implementação não fiquem expostos a outras partes do sistema. Essa prática aumenta a segurança e a independência entre módulos, permitindo que alterações internas, como mudanças no formato do CPF ou na lógica de senha, não afetem o restante do sistema.

A coesão também é evidenciada no projeto. Cada classe possui um propósito bem definido e todos os métodos contribuem diretamente para esse propósito. Isso pode ser visto, por exemplo, nos métodos create_user() e create_card_tarefa(), que tratam de ações distintas — um voltado à criação de usuários e outro à criação de tarefas. Essa organização torna o código mais legível e facilita a manutenção.

O projeto também demonstra preocupação com o acoplamento, buscando manter um baixo nível de dependência entre as classes. A relação entre Usuario e Card_tarefa é feita por associação, e não por herança, o que significa que uma classe pode evoluir sem impactar diretamente a outra. No diagrama de sequência, essa separação é reforçada pela comunicação entre camadas bem definidas (Aplicativo, Tarefa e Database), evitando dependências diretas e promovendo um acoplamento mais saudável.

Outro princípio aplicado é o princípio de Demeter, conhecido como o princípio do menor conhecimento. Ele recomenda que uma classe conheça apenas as partes essenciais com as quais interage. No caso da Agenda Virtual, o aplicativo não acessa diretamente o banco de dados, mas realiza suas ações por meio da camada de tarefas. Essa abordagem reduz o risco de dependências desnecessárias e mantém o sistema mais encapsulado.

Além disso, o sistema foi pensado de forma aberta para extensão e fechada para modificação, conforme o princípio aberto/fechado. Isso significa que novas funcionalidades, como lembretes de compromissos ou novos tipos de eventos, podem ser adicionadas sem a necessidade de alterar o código já existente. Por exemplo, a classe Card_tarefa pode ser estendida para criar uma versão específica para eventos recorrentes, preservando a base já implementada.

Por fim, o projeto também segue o princípio de preferir composição a herança. A classe Card_tarefa possui um usuário responsável (composição), em vez de herdar da classe Usuario. Essa escolha torna o sistema mais flexível e menos dependente de hierarquias rígidas, permitindo o reuso de componentes sem gerar acoplamento forte entre eles.

Em resumo, o projeto da Agenda Virtual aplica de forma coerente os princípios de responsabilidade única, ocultamento de informação, coesão, baixo acoplamento, lei de Demeter, aberto/fechado e preferência por composição. O resultado é uma estrutura modular e organizada, capaz de evoluir com facilidade, atender aos requisitos das user stories e manter a integridade conceitual do sistema.
